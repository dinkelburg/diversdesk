---
import MainLayout from "@/layouts/MainLayout.astro";
import { SEO } from "astro-seo";
import AvatarBlogLarge from "@components/ui/avatars/AvatarBlogLarge.astro";
import CardRelated from "@components/ui/cards/CardRelated.astro";
import Bookmark from "@components/ui/buttons/Bookmark.astro";
import SocialShare from "@components/ui/buttons/SocialShare.astro";
import PostFeedback from "@components/ui/feedback/PostFeedback.astro";
import { Image } from "astro:assets";
import { capitalize, formatDate } from "@utils/utils";
import { getCollection } from "astro:content";
import { SITE } from "@data/constants";


// Generate paths for all blog posts
export async function getStaticPaths() {
  const blogPosts = await getCollection("blog", ({ id }) => {
    return id.startsWith("en/");
  });
  return blogPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// Props and content extraction
const { post } = Astro.props;
const blogPosts = await getCollection("blog", ({ id }) => id.startsWith("en/"));
const relatedPosts = blogPosts.filter((blogEntry) => blogEntry.slug !== post.slug);
const { Content } = await post.render();
const pageTitle = `${post.data.title} | ${SITE.title}`;
const pageUrl = `https://diversdesk.com/blog/${post.slug}`;

---

<MainLayout title={pageTitle}>

  <!--Custom SEO -->
  <SEO 
  title={post.data.title} 
  description={post.data.description} 
  openGraph={{ 
    basic: { 
      title: post.data.title, 
      type: "article", 
      image: post.data.cardImage.src,
      url: pageUrl
    }
  }}
  canonical={pageUrl}
  />

  <!-- BlogPosting Schema -->
  <script type="application/ld+json" is:inline>
  {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": "{post.data.title}",
    "description": "{post.data.description}",
    "author": {
      "@type": "Person",
      "name": "{post.data.author}"
    },
  "datePublished": "{post.data.pubDate}",
    "dateModified": "{post.data.dateModified || post.data.pubDate}", 
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": "https://www.diversdesk.com/blog/{post.slug}"
    },
    "image": {
      "@type": "ImageObject",
      "url": "{post.data.cardImage.src}",
      "width": 800,
      "height": 450
    },
    "publisher": {
      "@type": "Organization",
      "name": "DiversDesk",
      "logo": {
        "@type": "ImageObject",
        "url": "https://www.diversdesk.com/images/logo.avif",
        "width": 250,
        "height": 60
      }
    },
    "url": "https://www.diversdesk.com/blog/{post.slug}"
  }
  </script>


  <section class="mx-auto max-w-3xl px-4 pb-12 pt-6 sm:px-6 lg:px-8 lg:pt-10">
    <div class="max-w-2xl">
      <div class="mb-6 flex items-center justify-between">
        <div class="flex w-full gap-x-5 sm:items-center sm:gap-x-3">
          <AvatarBlogLarge blogEntry={post} />
          <div class="grow">
            <div class="flex items-center justify-between gap-x-2">
              <div>
                <!--Post metadata and author info-->
                <span class="font-bold text-neutral-700 dark:text-neutral-300">
                  {post.data.author}
                </span>
                <ul class="text-xs text-neutral-500">
                  <li class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600">
                    {formatDate(post.data.pubDate)}
                  </li>
                  <li class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600">
                    {post.data.readTime} min read
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!--Blog post title-->
      <h1 class="mb-3 text-2xl font-bold text-neutral-800 dark:text-neutral-200 md:text-3xl">
        {post.data.title}
      </h1>

       <!-- Blog post image (cardImage) after 2nd paragraph -->
       <div class="h-64 overflow-hidden rounded-lg shadow-lg md:h-80 mb-6">
        <Image
          class="h-full w-full object-cover object-center"
          src={post.data.cardImage}
          alt={post.data.cardImageAlt}
          draggable="false"
          format="avif"
        />
      </div>
      <!--Render contents from frontmatter-->
      <div class="mb-5 space-y-5 md:mb-8 md:space-y-8">
        {post.data.contents.map((content: string) => (
          <p class="text-pretty text-lg text-neutral-700 dark:text-neutral-300">
            {content}
          </p>
        ))}
      </div>
      <!--Render markdown content outside of frontmatter-->
      <article class="mb-5 space-y-5 md:mb-8 md:space-y-8 text-pretty text-lg text-neutral-700 dark:text-neutral-300">
        <Content />
      </article>
      <div class="mx-auto grid max-w-screen-lg gap-y-5 sm:flex sm:items-center sm:justify-between sm:gap-y-0">
        <!--Blog post tags-->
        <div class="flex flex-wrap gap-x-2 gap-y-1 sm:flex-nowrap sm:items-center sm:gap-y-0">
          {post.data.tags?.map((tag: string) => (
            <span class="inline-flex items-center gap-x-1.5 rounded-lg bg-neutral-400/30 px-3 py-1.5 text-xs font-medium text-neutral-700 outline-none focus:outline-none focus-visible:outline-none focus-visible:ring dark:bg-neutral-700/60 dark:text-neutral-300">
              {capitalize(tag)}
            </span>
          ))}
        </div>
        <!--Bookmark and Share buttons-->
        <div class="flex items-center justify-end gap-x-1.5">
          <Bookmark />
          <div class="mx-3 block h-4 border-e border-neutral-400 dark:border-neutral-500"></div>
          <div class="inline-flex">
            <SocialShare pageTitle={post.data.title} />
          </div>
        </div>
      </div>
    </div>
    <!-- <PostFeedback title="Was this post helpful?" firstChoice="Yes" secondChoice="No" /> -->
  </section>

  <!--Related articles section-->
  <section class="mx-auto max-w-3xl px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
    <div class="mb-10 max-w-2xl">
      <h2 class="text-balance text-2xl font-bold text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight">
        Related articles
      </h2>
    </div>
    <div class="grid grid-cols-2 gap-6">
      {relatedPosts.map((entry) => <CardRelated blogEntry={entry} />)}
    </div>
  </section>
</MainLayout>

<style is:global>
  :root {
    --transition-cubic: cubic-bezier(0.165, 0.84, 0.44, 1);
  }

  html {
    scroll-behavior: smooth;
  }

  article h2,
  article h3,
  article h4,
  article h5,
  article h6 {
    font-weight: bold;
    margin-top: 2.5rem;
    scroll-margin-top: 3rem;
  }

  h2 {
    font-size: 1.5rem;
    line-height: 2rem;
  }

  h3 {
    font-size: 1.25rem;
    line-height: 1.75rem;
  }

  h4 {
    font-size: 1.125rem;
    line-height: 1.75rem;
  }

  p {
    margin-top: 1.5rem;
  }

  #toc li {
    display: flex;
    align-items: center;
    opacity: 0.8;
    transition: all 300ms var(--transition-cubic);
  }

  #toc li.selected {
    opacity: 1;
  }

  #toc li svg {
    width: 0;
    height: 0;
    transition:
      height 400ms var(--transition-cubic),
      width 400ms var(--transition-cubic);
  }

  #toc li.selected svg {
    width: 1.25rem;
    height: 1.25rem;
    margin-right: 0.3rem;
  }
</style>

<script>
  const onScroll = (): void => {
    const article = document.querySelector("article");
    if (!article) return;

    const articleHeight = article.offsetHeight;
    const articleOffsetTop = article.offsetTop;

    const scrollTop = window.scrollY || document.documentElement.scrollTop;

    if (articleHeight && articleOffsetTop && scrollTop) {
      const progress =
        ((scrollTop - articleOffsetTop) /
          (articleHeight - window.innerHeight)) *
        100;

      const progressBar = document.getElementById("progress");
      const progressBarMobile = document.getElementById("progress-mobile");

      if (progressBar && progressBarMobile) {
        progressBar.style.width = `${progress}%`;
        progressBarMobile.style.width = `${progress}%`;
      }
    }
  };

  document.addEventListener("DOMContentLoaded", (event) => {
    window.onscroll = onScroll;

    // Set initial width of progress bar
    const progressBar = document.getElementById("progress");
    const progressBarMobile = document.getElementById("progress-mobile");

    if (progressBar && progressBarMobile) {
      progressBar.style.width = "0%";
      progressBarMobile.style.width = "0%";
    }
  });
</script>
